package main

import (
	"errors"
	"fmt"
	"log"
	"math"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/tuneinsight/lattigo/v3/ckks"
	"github.com/tuneinsight/lattigo/v3/dckks"
	"github.com/tuneinsight/lattigo/v3/drlwe"
	"github.com/tuneinsight/lattigo/v3/rlwe"
	"github.com/tuneinsight/lattigo/v3/utils"
)

// This example showcases how lookup tables can complement the CKKS scheme to compute non-linear functions
// such as sign. The example starts by homomorphically decoding the CKKS ciphertext from the canonical embeding
// to the coefficient embeding. It then evaluates the Look-Up-Table (LUT) on each coefficient and repacks the
// outputs of each LUT in a single RLWE ciphertext. Finally, it homomorphically encodes the RLWE ciphertext back
// to the canonical embeding of the CKKS scheme.

// ==============================
// Functions to evaluate with LUT
// ==============================
func sign(x float64) (y float64) {
	if x >= 8.22 {
		return 822
	} else if x <= -8.22 {
		return -822
	} else {
		return x
	}
}

// Check the result
const float64EqualityThreshold = 1e-4

var NGoRoutine int = 1 // Default number of Go routines

func almostEqual(a, b float64) bool {
	return math.Abs(a-b) <= float64EqualityThreshold
}

func check(err error) {
	if err != nil {
		panic(err)
	}
}

func runTimed(f func()) time.Duration {
	start := time.Now()
	f()
	return time.Since(start)
}

func runTimedParty(f func(), N int) time.Duration {
	start := time.Now()
	f()
	return time.Duration(time.Since(start).Nanoseconds() / int64(N))
}

type party struct {
	id         int
	folderName string

	sk         *rlwe.SecretKey
	rlkEphemSk *rlwe.SecretKey

	ckgShare    *drlwe.CKGShare
	rkgShareOne *drlwe.RKGShare
	rkgShareTwo *drlwe.RKGShare
	rtgShare    *drlwe.RTGShare
	pcksShare   *drlwe.PCKSShare

	input []float64
}

type task struct {
	wg          *sync.WaitGroup
	op1         *ckks.Ciphertext
	op2         *ckks.Ciphertext
	res         *ckks.Ciphertext
	elapsedtask time.Duration
}

var elapsedEncryptParty time.Duration
var elapsedEncryptCloud time.Duration
var elapsedCKGCloud time.Duration
var elapsedCKGParty time.Duration
var elapsedRKGCloud time.Duration
var elapsedRKGParty time.Duration
var elapsedRTGCloud time.Duration
var elapsedRTGParty time.Duration
var elapsedPCKSCloud time.Duration
var elapsedPCKSParty time.Duration
var elapsedEvalCloudCPU time.Duration
var elapsedEvalCloud time.Duration
var elapsedEvalParty time.Duration
var elapsedDecParty time.Duration
var pathFormat = "C:\\Users\\23304161\\source\\smw\\%s\\House_10sec_1month_%d.csv"

//main start
func main() {
	init_params()

	var start time.Time
	start = time.Now()
	// For more details about the PSI example see
	//     Multiparty Homomorphic Encryption: From Theory to Practice (<https://eprint.iacr.org/2020/304>)
	l := log.New(os.Stderr, "", 0)

	// $go run main.go arg1 arg2
	// arg1: number of parties
	// arg2: number of Go routines
	// Creating encryption parameters from a default params with logN=14, logQP=438 with a plaintext modulus T=65537
	// paramsDef := ckks.PN14QP438CI //PN16QP1761CI
	// paramsDef := ckks.ParametersLiteral{
	// 	LogN:         18,
	// 	LogQ:         []int{55, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
	// 	LogP:         []int{45, 45},
	// 	LogSlots:     18,
	// 	RingType:     ring.ConjugateInvariant,
	// 	DefaultScale: 1 << 45,
	// }
	// paramsN12, err := ckks.NewParametersFromLiteral(paramsDef)
	// check(err)

	crs, err := utils.NewKeyedPRNG([]byte{'l', 'a', 't', 't', 'i', 'g', 'o'})
	check(err)

	encoder := ckks.NewEncoder(paramsN12)
	// Target private and public keys
	tkgen := ckks.NewKeyGenerator(paramsN12)
	tsk, tpk := tkgen.GenKeyPair()

	folderName := "200Houses_10s_1month_highNE"
	householdIDs := []int{1, 2, 3} // using suffix IDs of the csv files
	// Largest for n=8192: 512 parties

	// Create each party, and allocate the memory for all the shares that the protocols will need
	// create parties
	P := genparties(paramsN12, folderName, householdIDs) //each secret key

	// Inputs & expected result, cleartext result
	//read CSV files, len(expRes) == size of rows
	// fulfill P's input property & fulfill expRes as comparison
	genInputs(paramsN12, P) //fill data

	// 1) Collective public key generation
	pk := ckgphase(paramsN12, crs, P)

	// 2) Collective relinearization key generation & rotation key generation
	rlk := rkgphase(paramsN12, crs, P)
	rotk := rtkgphase(paramsN12, crs, P)

	// 3) Create evaluator & encryptor
	evaluator := ckks.NewEvaluator(paramsN12, rlwe.EvaluationKey{Rlk: rlk, Rtks: rotk})
	encryptor := ckks.NewEncryptor(paramsN12, pk)

	l.Printf("\tdone (cloud: %s, party: %s)\n",
		elapsedRKGCloud, elapsedRKGParty)
	l.Printf("\tSetup done (cloud: %s, party: %s)\n",
		elapsedRKGCloud+elapsedCKGCloud, elapsedRKGParty+elapsedCKGParty)

	//generate ciphertexts
	encInputs := encPhase(paramsN12, P, pk, encoder, encryptor, evaluator)

	// calcuate the sum of each encInput
	for _, encInput := range encInputs {
		evaluator.InnerSumLog(encInput, 1, paramsN12.Slots(), encInput) // add sum, not average per element
	}

	//copy encInputs => encInputsCopy for sign
	factorArray := make([]float64, paramsN12.Slots()) //should be filled with zero?
	zeroPt := ckks.NewPlaintext(paramsN12, paramsN12.MaxLevel(), paramsN12.DefaultScale())
	encoder.Encode(factorArray, zeroPt, paramsN12.LogSlots()) //logSlots=6 => 64
	sumCipherText := ckks.NewCiphertext(paramsN12, 1, paramsN12.MaxLevel(), paramsN12.DefaultScale())
	encryptor.Encrypt(zeroPt, sumCipherText)

	factorArray[0] = 1.0
	factorPt := ckks.NewPlaintext(paramsN12, paramsN12.MaxLevel(), paramsN12.DefaultScale())
	encoder.Encode(factorArray, factorPt, paramsN12.LogSlots()) //logSlots=6 => 64
	//
	encInputsCopy := make([]*ckks.Ciphertext, 0)
	for _, encInput := range encInputs {
		// encInputCopy := encInput.CopyNew()
		evaluator.MulRelin(encInput, factorPt, encInput)
		encInputsCopy = append(encInputsCopy, encInput)
		//rotation process for each encInput
		// k = (64-i)%64, then k needs to be decomposed to a sum of numbers which are the power of 2
		// leftOffset := (64 - i) % 64
		// binaryStr := strconv.FormatInt(int64(leftOffset), 2) //e.g. 1000, binary string
		// lenBinaryStr := len(binaryStr)                       //4
		// for j := 0; j < lenBinaryStr; j++ {
		// 	if binaryStr[j] == 49 { // '1'
		// 		k := int(math.Pow(2, float64(lenBinaryStr-j-1)))
		// 		evaluator.Rotate(encInputCopy, k, encInputCopy) // second param must be a power of 2
		// 	}
		// }

		// evaluator.Add(sumCipherText, encInputCopy, sumCipherText)
	}

	//prepare encInputsCopy

	//LUT start
	// LUT interval==============================================================================
	// a, b := -32.0, 32.0

	// // Rescale inputs during Homomorphic Decoding by the normalization of the
	// // LUT inputs and change of scale to ensure that upperbound on the homomorphic
	// // decryption of LWE during the LUT evaluation X^{dec(lwe)} is smaller than N
	// // to avoid negacyclic wrapping of X^{dec(lwe)}.
	// diffScale := paramsN11.QiFloat64(0) / (4.0 * paramsN12.DefaultScale())
	// normalization := 2.0 / (b - a) // all inputs are normalized before the LUT evaluation.

	// // SlotsToCoeffsParameters homomorphic encoding parameters
	// var SlotsToCoeffsParameters = ckksAdvanced.EncodingMatrixLiteral{
	// 	LogN:                paramsN12.LogN(),
	// 	LogSlots:            paramsN12.LogSlots(),
	// 	Scaling:             normalization * diffScale,
	// 	LinearTransformType: ckksAdvanced.SlotsToCoeffs,
	// 	RepackImag2Real:     false,
	// 	LevelStart:          1,     // starting level
	// 	BSGSRatio:           4.0,   // ratio between n1/n2 for n1*n2 = slots
	// 	BitReversed:         false, // bit-reversed input
	// 	ScalingFactor: [][]float64{ // Decomposition level of the encoding matrix
	// 		{paramsN12.QiFloat64(1)}, // Scale of the decoding matrix
	// 	},
	// }

	// // CoeffsToSlotsParameters homomorphic decoding parameters
	// var CoeffsToSlotsParameters = ckksAdvanced.EncodingMatrixLiteral{
	// 	LinearTransformType: ckksAdvanced.CoeffsToSlots,
	// 	RepackImag2Real:     false,
	// 	LogN:                paramsN12.LogN(),
	// 	LogSlots:            paramsN12.LogSlots(),
	// 	Scaling:             1 / float64(paramsN12.Slots()),
	// 	LevelStart:          1,     // starting level
	// 	BSGSRatio:           4.0,   // ratio between n1/n2 for n1*n2 = slots
	// 	BitReversed:         false, // bit-reversed input
	// 	ScalingFactor: [][]float64{ // Decomposition level of the encoding matrix
	// 		{paramsN12.QiFloat64(1)}, // Scale of the encoding matrix
	// 	},
	// }

	// fmt.Printf("Generating LUT... ")
	// now := time.Now()
	// // Generate LUT, provide function, outputscale, ring and interval.
	// LUTPoly := lut.InitLUT(sign, paramsN12.DefaultScale(), paramsN12.RingQ(), a, b)
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// // Index of the LUT poly and repacking after evaluating the LUT.
	// lutPolyMap := make(map[int]*ring.Poly) // Which slot to evaluate on the LUT
	// repackIndex := make(map[int]int)       // Where to repack slots after the LUT
	// gapN11 := paramsN11.N() / (2 * paramsN12.Slots())
	// gapN12 := paramsN12.N() / (2 * paramsN12.Slots())

	// for i := 0; i < paramsN12.Slots(); i++ {
	// 	lutPolyMap[i*gapN11] = LUTPoly
	// 	repackIndex[i*gapN11] = i * gapN12
	// }

	// // kgenN12 := ckks.NewKeyGenerator(paramsN12)
	// // skN12 := kgenN12.GenSecretKey()
	// // encoderN12 := ckks.NewEncoder(paramsN12)
	// encryptorN12 := ckks.NewEncryptor(paramsN12, skN12)
	// // decryptorN12 := ckks.NewDecryptor(paramsN12, skN12)

	// kgenN11 := ckks.NewKeyGenerator(paramsN11)
	// skN11 := kgenN11.GenSecretKey()
	// //decryptorN11 := ckks.NewDecryptor(paramsN11, skN11)
	// //encoderN11 := ckks.NewEncoder(paramsN11)

	// // Switchingkey RLWEN12 -> RLWEN11
	// swkN12ToN11 := ckks.NewKeyGenerator(paramsN12ToN11).GenSwitchingKey(skN12, skN11)

	// fmt.Printf("Gen SlotsToCoeffs Matrices... ")
	// now = time.Now()
	// SlotsToCoeffsMatrix := ckksAdvanced.NewHomomorphicEncodingMatrixFromLiteral(SlotsToCoeffsParameters, encoderN12)
	// CoeffsToSlotsMatrix := ckksAdvanced.NewHomomorphicEncodingMatrixFromLiteral(CoeffsToSlotsParameters, encoderN12)
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// // Rotation Keys
	// rotations := []int{}
	// for i := 1; i < paramsN12.N(); i <<= 1 {
	// 	rotations = append(rotations, i)
	// }

	// rotations = append(rotations, SlotsToCoeffsParameters.Rotations()...)
	// rotations = append(rotations, CoeffsToSlotsParameters.Rotations()...)

	// rotKey := kgenN12.GenRotationKeysForRotations(rotations, true, skN12)

	// // LUT Evaluator
	// evalLUT := lut.NewEvaluator(paramsN12.Parameters, paramsN11.Parameters, rotKey)

	// // CKKS Evaluator
	// evalCKKS := ckksAdvanced.NewEvaluator(paramsN12, rlwe.EvaluationKey{Rlk: nil, Rtks: rotKey})
	// evalCKKSN12ToN11 := ckks.NewEvaluator(paramsN12ToN11, rlwe.EvaluationKey{})

	// fmt.Printf("Encrypting bits of skLWE in RGSW... ")
	// now = time.Now()
	// LUTKEY := lut.GenEvaluationKey(paramsN12.Parameters, skN12, paramsN11.Parameters, skN11) // Generate RGSW(sk_i) for all coefficients of sk
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// // Generates the starting plaintext values.
	// // interval := (b - a) / float64(paramsN12.Slots())
	// // values := make([]float64, paramsN12.Slots())
	// // for i := 0; i < paramsN12.Slots(); i++ {
	// // 	values[i] = a + float64(i)*interval
	// // }
	// // pt := ckks.NewPlaintext(paramsN12, paramsN12.MaxLevel(), paramsN12.DefaultScale())
	// // encoderN12.EncodeSlots(values, pt, paramsN12.LogSlots())
	// // ctN12 := encryptorN12.EncryptNew(pt)
	// ctN12 := encInputsCopy[0].CopyNew()
	// fmt.Printf("Homomorphic Decoding... ")
	// now = time.Now()
	// // Homomorphic Decoding: [(a+bi), (c+di)] -> [a, c, b, d]
	// ctN12 = evalCKKS.SlotsToCoeffsNew(ctN12, nil, SlotsToCoeffsMatrix)
	// ctN12.Scale = paramsN11.QiFloat64(0) / 4.0

	// // Key-Switch from LogN = 12 to LogN = 10
	// evalCKKS.DropLevel(ctN12, ctN12.Level())                    // drop to LUT level
	// ctTmp := evalCKKSN12ToN11.SwitchKeysNew(ctN12, swkN12ToN11) // key-switch to LWE degree
	// ctN11 := ckks.NewCiphertext(paramsN11, 1, paramsN11.MaxLevel(), ctTmp.Scale)
	// rlwe.SwitchCiphertextRingDegreeNTT(ctTmp.Ciphertext, paramsN11.RingQ(), paramsN12.RingQ(), ctN11.Ciphertext)
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// //for i, v := range encoderN11.DecodeCoeffs(decryptorN11.DecryptNew(ctN11)){
	// //	fmt.Printf("%3d: %7.4f\n", i, v)
	// //}

	// fmt.Printf("Evaluating LUT... ")
	// now = time.Now()
	// // Extracts & EvalLUT(LWEs, indexLUT) on the fly -> Repack(LWEs, indexRepack) -> RLWE
	// ctN12.Ciphertext = evalLUT.EvaluateAndRepack(ctN11.Ciphertext, lutPolyMap, repackIndex, LUTKEY)
	// ctN12.Scale = paramsN12.DefaultScale()
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// //for i, v := range encoderN12.DecodeCoeffs(decryptorN12.DecryptNew(ctN12)){
	// //	fmt.Printf("%3d: %7.4f\n", i, v)
	// //}

	// fmt.Printf("Homomorphic Encoding... ")
	// now = time.Now()
	// // Homomorphic Encoding: [LUT(a), LUT(c), LUT(b), LUT(d)] -> [(LUT(a)+LUT(b)i), (LUT(c)+LUT(d)i)]
	// ctN12, _ = evalCKKS.CoeffsToSlotsNew(ctN12, CoeffsToSlotsMatrix)
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// //print results
	// // fmt.Printf("%7.4f\n", real(encoderN12.Decode(decryptorN12.DecryptNew(ctN12), paramsN12.LogSlots())[0]))

	//LUT end==============================================================================

	//calculation after LUT

	//key-switching to tpk
	encOuts := make([]*ckks.Ciphertext, 0) // here length should be 0, otherwise append will not right.
	// for _, encInput := range encInputsCopy {
	// 	encOuts = append(encOuts, pcksPhase(paramsN12, tpk, encInput, P)) //switch-key,include to encOuts
	// }
	encOuts = append(encOuts, pcksPhase(paramsN12, tpk, encInputsCopy[0], P))

	// Decrypt & Check the result
	l.Println("> Decrypt & Result:")
	decryptor := ckks.NewDecryptor(paramsN12, tsk) // decrypt using the target secret key
	ptres := ckks.NewPlaintext(paramsN12, paramsN12.MaxLevel(), paramsN12.DefaultScale())
	for i, encOut := range encOuts {
		//HE calculated result
		elapsedDecParty += runTimed(func() {
			decryptor.Decrypt(encOut, ptres) //ciphertext->plaintext
		})
		res := encoder.Decode(ptres, paramsN12.LogSlots())

		fmt.Printf("> Calculated Sum of elements of encOuts[%d]: %.6f, %.6f, %.6f", i, real(res[0]), real(res[1]), real(res[2]))
		fmt.Println()
		//expected result
		// expSum := float64(0)
		// for _, element := range P[i].input {
		// 	expSum += element
		// }
		// fmt.Printf("> Expected Sum of elements of encOuts[%d]: %.6f", i, expSum)
		// fmt.Println()
	}

	//time
	l.Printf("\tdone (party: %s)\n", elapsedDecParty)
	fmt.Printf("> Finished (total cloud: %s, total party: %s)\n",
		elapsedCKGCloud+elapsedRKGCloud+elapsedRTGCloud+elapsedEncryptCloud+elapsedEvalCloud+elapsedPCKSCloud,
		elapsedCKGParty+elapsedRKGParty+elapsedRTGParty+elapsedEncryptParty+elapsedEvalParty+elapsedPCKSParty+elapsedDecParty)
	fmt.Println()
	fmt.Printf("Main() Done in %s \n", time.Since(start))

	// test_lut()
}

//main end

// to get []ciphertext for parties
func encPhase(params ckks.Parameters, P []*party, pk *rlwe.PublicKey, encoder ckks.Encoder, encryptor ckks.Encryptor, evaluator ckks.Evaluator) (encInputs []*ckks.Ciphertext) {
	// params = paramsN12
	l := log.New(os.Stderr, "", 0)

	encInputs = make([]*ckks.Ciphertext, len(P))
	for i := range encInputs {
		encInputs[i] = ckks.NewCiphertext(params, 1, params.MaxLevel(), params.DefaultScale())
	}

	// Each party encrypts its input vector
	l.Println("> Encrypt Phase")
	sectionPt := ckks.NewPlaintext(params, params.MaxLevel(), params.DefaultScale())
	zeroArray := make([]float64, params.Slots())            //should be filled with zero?
	encoder.Encode(zeroArray, sectionPt, params.LogSlots()) //logSlots=6 => 64
	sectionCipherText := ckks.NewCiphertext(params, 1, params.MaxLevel(), params.DefaultScale())
	for i, _ := range P {
		encryptor.Encrypt(sectionPt, encInputs[i])
	}

	elapsedEncryptParty = runTimedParty(func() {
		for i, pi := range P {
			sections := len(pi.input) / params.LogSlots()
			if len(pi.input)%params.LogSlots() != 0 {
				sections += 1
			}
			for s := 0; s < sections; s++ {
				sectionArray := make([]float64, params.Slots())
				for t := 0; t < params.Slots(); t++ {
					index := s*params.Slots() + t
					if index < len(pi.input) {
						sectionArray[t] = pi.input[index]
					}
				}
				encoder.Encode(sectionArray, sectionPt, params.LogSlots()) //logSlots=6 => 64
				encryptor.Encrypt(sectionPt, sectionCipherText)
				evaluator.Add(encInputs[i], sectionCipherText, encInputs[i])
			}
		}
	}, len(P))

	elapsedEncryptCloud = time.Duration(0)
	l.Printf("\tdone (cloud: %s, party: %s)\n", elapsedEncryptCloud, elapsedEncryptParty)

	return
}

//generate parties
func genparties(params ckks.Parameters, folderName string, householdIDs []int) []*party {
	N := len(householdIDs)
	// Create each party, and allocate the memory for all the shares that the protocols will need
	P := make([]*party, N)

	for i, id := range householdIDs {
		pi := &party{}
		pi.sk = ckks.NewKeyGenerator(params).GenSecretKey()
		pi.id = id
		pi.folderName = folderName

		P[i] = pi
	}

	return P
}

//file reading
func ReadCSV(path string) []string {
	fmt.Println("reading without buffer:")
	data, err := os.ReadFile(path)
	if err != nil {
		panic(err)
	}
	// fmt.Println("data:", string(data))
	dArray := strings.Split(string(data), "\n")
	fmt.Println("original CSV size:", len(dArray))
	dArray2 := dArray[1 : len(dArray)-1]
	fmt.Println("data CSV size:", len(dArray2)) //[0]..[241919]
	return dArray2
}

//trim csv
func resizeCSV(folderName string, id int) []float64 {

	path := fmt.Sprintf(pathFormat, folderName, id)
	csv := ReadCSV(path)

	elements := []float64{}
	for _, v := range csv {
		slices := strings.Split(v, ",")
		tmpStr := slices[len(slices)-1]
		fNum, err := strconv.ParseFloat(tmpStr, 64)
		if err != nil {
			panic(err)
		}
		elements = append(elements, fNum)
	}

	return elements
}

//generate inputs of parties
func genInputs(params ckks.Parameters, P []*party) (expRes []float64) {

	globalPartyRows := -1
	for _, pi := range P {
		partyRows := resizeCSV(pi.folderName, pi.id)
		lenPartyRows := len(partyRows)

		if globalPartyRows == -1 {
			//global setting, run once
			globalPartyRows = lenPartyRows
			expRes = make([]float64, globalPartyRows)
		} else if globalPartyRows != lenPartyRows {
			//make sure pi.input[] has the same size
			err := errors.New("Not all files have the same rows")
			check(err)
		}

		pi.input = make([]float64, lenPartyRows)
		for i := range pi.input {
			pi.input[i] = partyRows[i]
			expRes[i] += pi.input[i]
		}

	}

	//average by P parties
	for i, _ := range expRes {
		expRes[i] /= float64(len(P))
	}

	return
}

//key switching phase
func pcksPhase(params ckks.Parameters, tpk *rlwe.PublicKey, encRes *ckks.Ciphertext, P []*party) (encOut *ckks.Ciphertext) {

	l := log.New(os.Stderr, "", 0)

	// Collective key switching from the collective secret key to
	// the target public key

	pcks := dckks.NewPCKSProtocol(params, 3.19)

	for _, pi := range P {
		pi.pcksShare = pcks.AllocateShare(params.MaxLevel())
	}

	l.Println("> PCKS Phase(key switching)")
	elapsedPCKSParty = runTimedParty(func() {
		for _, pi := range P {
			pcks.GenShare(pi.sk, tpk, encRes.Value[1], pi.pcksShare)
		}
	}, len(P))

	pcksCombined := pcks.AllocateShare(params.MaxLevel())
	encOut = ckks.NewCiphertext(params, 1, params.MaxLevel(), params.DefaultScale())
	elapsedPCKSCloud = runTimed(func() {
		for _, pi := range P {
			pcks.AggregateShare(pi.pcksShare, pcksCombined, pcksCombined)
		}
		pcks.KeySwitch(encRes, pcksCombined, encOut)

	})
	l.Printf("\tdone (cloud: %s, party: %s)\n", elapsedPCKSCloud, elapsedPCKSParty)

	return

}

//generate collective rotation key
func rtkgphase(params ckks.Parameters, crs utils.PRNG, P []*party) *rlwe.RotationKeySet {
	l := log.New(os.Stderr, "", 0)

	l.Println("> RTKG Phase(collective rotation key)")

	rtg := dckks.NewRotKGProtocol(params) // Rotation keys generation

	for _, pi := range P {
		pi.rtgShare = rtg.AllocateShare()
	}

	galEls := params.GaloisElementsForRowInnerSum()
	rotKeySet := ckks.NewRotationKeySet(params, galEls)

	for _, galEl := range galEls {

		rtgShareCombined := rtg.AllocateShare()

		crp := rtg.SampleCRP(crs)

		elapsedRTGParty += runTimedParty(func() {
			for _, pi := range P {
				rtg.GenShare(pi.sk, galEl, crp, pi.rtgShare)
			}
		}, len(P))

		elapsedRTGCloud += runTimed(func() {
			for _, pi := range P {
				rtg.AggregateShare(pi.rtgShare, rtgShareCombined, rtgShareCombined)
			}
			rtg.GenRotationKey(rtgShareCombined, crp, rotKeySet.Keys[galEl])
		})
	}
	l.Printf("\tdone (cloud: %s, party %s)\n", elapsedRTGCloud, elapsedRTGParty)

	return rotKeySet
}

//generate collective relinearization key
func rkgphase(params ckks.Parameters, crs utils.PRNG, P []*party) *rlwe.RelinearizationKey {
	l := log.New(os.Stderr, "", 0)

	l.Println("> RKG Phase(collective relinearization key)")

	rkg := dckks.NewRKGProtocol(params) // Relineariation key generation
	_, rkgCombined1, rkgCombined2 := rkg.AllocateShare()

	for _, pi := range P {
		pi.rlkEphemSk, pi.rkgShareOne, pi.rkgShareTwo = rkg.AllocateShare()
	}

	crp := rkg.SampleCRP(crs)

	elapsedRKGParty = runTimedParty(func() {
		for _, pi := range P {
			rkg.GenShareRoundOne(pi.sk, crp, pi.rlkEphemSk, pi.rkgShareOne)
		}
	}, len(P))

	elapsedRKGCloud = runTimed(func() {
		for _, pi := range P {
			rkg.AggregateShare(pi.rkgShareOne, rkgCombined1, rkgCombined1)
		}
	})

	elapsedRKGParty += runTimedParty(func() {
		for _, pi := range P {
			rkg.GenShareRoundTwo(pi.rlkEphemSk, pi.sk, rkgCombined1, pi.rkgShareTwo)
		}
	}, len(P))

	rlk := ckks.NewRelinearizationKey(params)
	elapsedRKGCloud += runTimed(func() {
		for _, pi := range P {
			rkg.AggregateShare(pi.rkgShareTwo, rkgCombined2, rkgCombined2)
		}
		rkg.GenRelinearizationKey(rkgCombined1, rkgCombined2, rlk)
	})

	l.Printf("\tdone (cloud: %s, party: %s)\n", elapsedRKGCloud, elapsedRKGParty)

	return rlk
}

//geneate collective public key
func ckgphase(params ckks.Parameters, crs utils.PRNG, P []*party) *rlwe.PublicKey {

	l := log.New(os.Stderr, "", 0)

	l.Println("> CKG Phase(collective public key)")

	ckg := dckks.NewCKGProtocol(params) // Public key generation
	ckgCombined := ckg.AllocateShare()
	for _, pi := range P {
		pi.ckgShare = ckg.AllocateShare()
	}

	crp := ckg.SampleCRP(crs)

	elapsedCKGParty = runTimedParty(func() {
		for _, pi := range P {
			ckg.GenShare(pi.sk, crp, pi.ckgShare)
		}
	}, len(P))

	pk := ckks.NewPublicKey(params)

	elapsedCKGCloud = runTimed(func() {
		for _, pi := range P {
			ckg.AggregateShare(pi.ckgShare, ckgCombined, ckgCombined)
		}
		ckg.GenPublicKey(ckgCombined, crp, pk)
	})

	l.Printf("\tdone (cloud: %s, party: %s)\n", elapsedCKGCloud, elapsedCKGParty)

	return pk
}

var LogN int = 12
var Q []uint64 = []uint64{0x800004001, 0x40002001} // 65.0000116961637 bits,65=35+30
// P modulus P
var P []uint64 = []uint64{0x4000026001} // 38.00000081692261 bits
var LogSlots int = 6
var DefaultScale float64 = 1 << 32
var paramsN12 ckks.Parameters
var paramsN12ToN11 ckks.Parameters
var paramsN11 ckks.Parameters
var err error

func init_params() {
	// Starting RLWE params, size of these params
	// determine the complexity of the LUT:
	// each LUT takes N RGSW ciphertext-ciphetext mul.
	// LogN = 12 & LogQP = ~103 -> >128-bit secure.
	paramsN12, err = ckks.NewParametersFromLiteral(ckks.ParametersLiteral{
		LogN:         LogN,
		Q:            Q,
		P:            P,
		LogSlots:     LogSlots,
		DefaultScale: DefaultScale,
	})
	check(err)

	// Params for Key-switching N12 to N11.
	// LogN = 12 & LogQP = ~54 -> >>>128-bit secure.
	paramsN12ToN11, err = ckks.NewParametersFromLiteral(ckks.ParametersLiteral{
		LogN:     LogN,
		Q:        Q[:1],
		P:        []uint64{0x42001},
		Pow2Base: 16,
	})
	check(err)

	// LUT RLWE params, N of these params determine
	// the LUT poly and therefore precision.
	// LogN = 11 & LogQP = ~54 -> 128-bit secure.
	paramsN11, err = ckks.NewParametersFromLiteral(ckks.ParametersLiteral{
		LogN:     LogN - 1,
		Q:        Q[:1],
		P:        []uint64{0x42001},
		Pow2Base: 12,
	})
	check(err)
}

func test_lut() {

	// LUT interval
	// a, b := -32.0, 32.0

	// // Rescale inputs during Homomorphic Decoding by the normalization of the
	// // LUT inputs and change of scale to ensure that upperbound on the homomorphic
	// // decryption of LWE during the LUT evaluation X^{dec(lwe)} is smaller than N
	// // to avoid negacyclic wrapping of X^{dec(lwe)}.
	// diffScale := paramsN11.QiFloat64(0) / (4.0 * paramsN12.DefaultScale())
	// normalization := 2.0 / (b - a) // all inputs are normalized before the LUT evaluation.

	// // SlotsToCoeffsParameters homomorphic encoding parameters
	// var SlotsToCoeffsParameters = ckksAdvanced.EncodingMatrixLiteral{
	// 	LogN:                paramsN12.LogN(),
	// 	LogSlots:            paramsN12.LogSlots(),
	// 	Scaling:             normalization * diffScale,
	// 	LinearTransformType: ckksAdvanced.SlotsToCoeffs,
	// 	RepackImag2Real:     false,
	// 	LevelStart:          1,     // starting level
	// 	BSGSRatio:           4.0,   // ratio between n1/n2 for n1*n2 = slots
	// 	BitReversed:         false, // bit-reversed input
	// 	ScalingFactor: [][]float64{ // Decomposition level of the encoding matrix
	// 		{paramsN12.QiFloat64(1)}, // Scale of the decoding matrix
	// 	},
	// }

	// // CoeffsToSlotsParameters homomorphic decoding parameters
	// var CoeffsToSlotsParameters = ckksAdvanced.EncodingMatrixLiteral{
	// 	LinearTransformType: ckksAdvanced.CoeffsToSlots,
	// 	RepackImag2Real:     false,
	// 	LogN:                paramsN12.LogN(),
	// 	LogSlots:            paramsN12.LogSlots(),
	// 	Scaling:             1 / float64(paramsN12.Slots()),
	// 	LevelStart:          1,     // starting level
	// 	BSGSRatio:           4.0,   // ratio between n1/n2 for n1*n2 = slots
	// 	BitReversed:         false, // bit-reversed input
	// 	ScalingFactor: [][]float64{ // Decomposition level of the encoding matrix
	// 		{paramsN12.QiFloat64(1)}, // Scale of the encoding matrix
	// 	},
	// }

	// fmt.Printf("Generating LUT... ")
	// now := time.Now()
	// // Generate LUT, provide function, outputscale, ring and interval.
	// LUTPoly := lut.InitLUT(sign, paramsN12.DefaultScale(), paramsN12.RingQ(), a, b)
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// // Index of the LUT poly and repacking after evaluating the LUT.
	// lutPolyMap := make(map[int]*ring.Poly) // Which slot to evaluate on the LUT
	// repackIndex := make(map[int]int)       // Where to repack slots after the LUT
	// gapN11 := paramsN11.N() / (2 * paramsN12.Slots())
	// gapN12 := paramsN12.N() / (2 * paramsN12.Slots())

	// for i := 0; i < paramsN12.Slots(); i++ {
	// 	lutPolyMap[i*gapN11] = LUTPoly
	// 	repackIndex[i*gapN11] = i * gapN12
	// }

	// kgenN12 := ckks.NewKeyGenerator(paramsN12)
	// skN12 := kgenN12.GenSecretKey()
	// encoderN12 := ckks.NewEncoder(paramsN12)
	// encryptorN12 := ckks.NewEncryptor(paramsN12, skN12)
	// decryptorN12 := ckks.NewDecryptor(paramsN12, skN12)

	// kgenN11 := ckks.NewKeyGenerator(paramsN11)
	// skN11 := kgenN11.GenSecretKey()
	// //decryptorN11 := ckks.NewDecryptor(paramsN11, skN11)
	// //encoderN11 := ckks.NewEncoder(paramsN11)

	// // Switchingkey RLWEN12 -> RLWEN11
	// swkN12ToN11 := ckks.NewKeyGenerator(paramsN12ToN11).GenSwitchingKey(skN12, skN11)

	// fmt.Printf("Gen SlotsToCoeffs Matrices... ")
	// now = time.Now()
	// SlotsToCoeffsMatrix := ckksAdvanced.NewHomomorphicEncodingMatrixFromLiteral(SlotsToCoeffsParameters, encoderN12)
	// CoeffsToSlotsMatrix := ckksAdvanced.NewHomomorphicEncodingMatrixFromLiteral(CoeffsToSlotsParameters, encoderN12)
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// // Rotation Keys
	// rotations := []int{}
	// for i := 1; i < paramsN12.N(); i <<= 1 {
	// 	rotations = append(rotations, i)
	// }

	// rotations = append(rotations, SlotsToCoeffsParameters.Rotations()...)
	// rotations = append(rotations, CoeffsToSlotsParameters.Rotations()...)

	// rotKey := kgenN12.GenRotationKeysForRotations(rotations, true, skN12)

	// // LUT Evaluator
	// evalLUT := lut.NewEvaluator(paramsN12.Parameters, paramsN11.Parameters, rotKey)

	// // CKKS Evaluator
	// evalCKKS := ckksAdvanced.NewEvaluator(paramsN12, rlwe.EvaluationKey{Rlk: nil, Rtks: rotKey})
	// evalCKKSN12ToN11 := ckks.NewEvaluator(paramsN12ToN11, rlwe.EvaluationKey{})

	// fmt.Printf("Encrypting bits of skLWE in RGSW... ")
	// now = time.Now()
	// LUTKEY := lut.GenEvaluationKey(paramsN12.Parameters, skN12, paramsN11.Parameters, skN11) // Generate RGSW(sk_i) for all coefficients of sk
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// // Generates the starting plaintext values.
	// interval := (b - a) / float64(paramsN12.Slots())
	// values := make([]float64, paramsN12.Slots())
	// for i := 0; i < paramsN12.Slots(); i++ {
	// 	values[i] = a + float64(i)*interval
	// }
	// pt := ckks.NewPlaintext(paramsN12, paramsN12.MaxLevel(), paramsN12.DefaultScale())
	// encoderN12.EncodeSlots(values, pt, paramsN12.LogSlots())
	// ctN12 := encryptorN12.EncryptNew(pt)

	// fmt.Printf("Homomorphic Decoding... ")
	// now = time.Now()
	// // Homomorphic Decoding: [(a+bi), (c+di)] -> [a, c, b, d]
	// ctN12 = evalCKKS.SlotsToCoeffsNew(ctN12, nil, SlotsToCoeffsMatrix)
	// ctN12.Scale = paramsN11.QiFloat64(0) / 4.0

	// // Key-Switch from LogN = 12 to LogN = 10
	// evalCKKS.DropLevel(ctN12, ctN12.Level())                    // drop to LUT level
	// ctTmp := evalCKKSN12ToN11.SwitchKeysNew(ctN12, swkN12ToN11) // key-switch to LWE degree
	// ctN11 := ckks.NewCiphertext(paramsN11, 1, paramsN11.MaxLevel(), ctTmp.Scale)
	// rlwe.SwitchCiphertextRingDegreeNTT(ctTmp.Ciphertext, paramsN11.RingQ(), paramsN12.RingQ(), ctN11.Ciphertext)
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// //for i, v := range encoderN11.DecodeCoeffs(decryptorN11.DecryptNew(ctN11)){
	// //	fmt.Printf("%3d: %7.4f\n", i, v)
	// //}

	// fmt.Printf("Evaluating LUT... ")
	// now = time.Now()
	// // Extracts & EvalLUT(LWEs, indexLUT) on the fly -> Repack(LWEs, indexRepack) -> RLWE
	// ctN12.Ciphertext = evalLUT.EvaluateAndRepack(ctN11.Ciphertext, lutPolyMap, repackIndex, LUTKEY)
	// ctN12.Scale = paramsN12.DefaultScale()
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// //for i, v := range encoderN12.DecodeCoeffs(decryptorN12.DecryptNew(ctN12)){
	// //	fmt.Printf("%3d: %7.4f\n", i, v)
	// //}

	// fmt.Printf("Homomorphic Encoding... ")
	// now = time.Now()
	// // Homomorphic Encoding: [LUT(a), LUT(c), LUT(b), LUT(d)] -> [(LUT(a)+LUT(b)i), (LUT(c)+LUT(d)i)]
	// ctN12, _ = evalCKKS.CoeffsToSlotsNew(ctN12, CoeffsToSlotsMatrix)
	// fmt.Printf("Done (%s)\n", time.Since(now))

	// //print results
	// for i, v := range encoderN12.Decode(decryptorN12.DecryptNew(ctN12), paramsN12.LogSlots()) {
	// 	fmt.Printf("%7.4f -> %7.4f\n", values[i], v)
	// }
}
